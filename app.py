from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import random
import json
import os

app = Flask(__name__)
CORS(app, origins=['*'])

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Vercel
app.config['JSONIFY_PRETTYPRINT_REGULAR'] = False

# === IN-MEMORY BALANCE (–∫–∞–∫ –≤ MSW) ===
BALANCE = 1000  # —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
roundCounter = 0

# === MOCK DATA (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ MSW) ===
def get_profile_data():
    return {
        "id": 123456,
        "playerId": "123456", 
        "apiKey": "123456",
        "playerName": "vortex",
        "name": "vortex",
        "nickname": "vortex",
        "currency": "FUN",
        "currencySign": "$",
        "rounding": 2,
        "balance": BALANCE,  # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å
        "sub": "local-demo",
        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJsb2NhbC1kZW1vIiwicGxheWVyTmFtZSI6InZvcnRleCIsImJhbGFuY2UiOjk5OTk5OTAwLCJjdXJyZW5jeSI6IkZVTiJ9.xxx"
    }

def get_settings_data():
    return {
        "availableTranslations": ["en", "ru"],
        "forceDemoAvailable": True,
        "red": [1, 2, 3, 4, 5, 6],
        "green": [1, 2, 3, 4, 5, 6], 
        "blue": [1, 2, 3, 4, 5, 6]
    }

def get_game_settings_data():
    return {
        # –í–ê–ñ–ù–û: –∫–ª—é—á–∏ –∏–º–µ–Ω–Ω–æ Symbol3/Symbol2/Symbol1 (–∫–∞–∫ –≤ MSW)
        "Symbol3": [1.1,1.3,1.55,2.0,3.0,5.0,7.0,10.0,12.5,15,20,25],  # red
        "Symbol2": [1.2,1.6,2.1,3.2,4.85,7.0,9.0,12.0,16.0,20.0,24.0,30.0], # green
        "Symbol1": [3.9,5.2,7.7,12.5,18.0,24.0,32.0,44.0,60.0,80.0,110.0,150.0] # blue
    }

def get_game_config_data():
    return {
        "progressMax": 12,  # –º–∞–∫—Å–∏–º—É–º —à–∞–≥–æ–≤ –Ω–∞ –∫–æ–ª—å—Ü–æ
        "spineData": [
            {"id": "Symbol1", "ring": 2},   # blue
            {"id": "Symbol2", "ring": 1},   # green  
            {"id": "Symbol3", "ring": 0},   # red
            {"id": "SymbolNeutral", "ring": None},
            {"id": "SymbolLoss", "ring": "reset"}
        ]
    }

# === STATIC FILES ===
@app.route('/')
def serve_index():
    """–û—Ç–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    return send_from_directory('.', 'index.html')

@app.route('/vercel')
def vercel_index():
    """–í–µ—Ä—Å–∏—è –¥–ª—è Vercel –±–µ–∑ Service Worker"""
    return send_from_directory('.', 'index-vercel.html')

@app.route('/no-sw')
def serve_index_no_sw():
    """–û—Ç–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–µ–∑ Service Worker"""
    return send_from_directory('.', 'index_no_sw.html')

@app.route('/<path:filename>')
def serve_static(filename):
    """–û—Ç–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã"""
    try:
        return send_from_directory('.', filename)
    except FileNotFoundError:
        return jsonify({"error": "File not found"}), 404

# === API ENDPOINTS (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ MSW) ===

# Profile endpoints
@app.route('/api/common/profile', methods=['GET', 'POST'])
@app.route('/v2/api/common/profile', methods=['GET', 'POST'])
def profile():
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return jsonify(get_profile_data())

# Settings endpoints  
@app.route('/api/common/settings', methods=['GET'])
@app.route('/v2/api/common/settings', methods=['GET'])
def common_settings():
    """–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    return jsonify(get_settings_data())

@app.route('/api/games/settings', methods=['GET'])
@app.route('/v2/api/games/settings', methods=['GET'])
def game_settings():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã"""
    return jsonify(get_game_settings_data())

@app.route('/api/games/config', methods=['GET'])
@app.route('/v2/api/games/config', methods=['GET'])
def game_config():
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã"""
    return jsonify(get_game_config_data())

# Game endpoints
@app.route('/api/games/create', methods=['POST'])
@app.route('/v2/api/games/create', methods=['POST'])
def create_game():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
    global roundCounter
    roundCounter += 1
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω—É–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∫–∞–∫ –≤ MSW)
    return jsonify({
        "roundId": f"round-{roundCounter}",
        "state": {
            "initial": True,
            "collection": [0, 0, 0],
            "bonusWin": 0,
            "superBonus": False,
            "symbol": "SymbolNeutral",
            "cashable": False
        }
    })

def calculate_coefficient_from_rings(collection):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ª–µ—Ü"""
    coeffs = {
        'Symbol1': [0, 1.55, 4.85, 10, 7],      # blue (ring 2)
        'Symbol2': [0, 2.5, 7.7, 16, 27.5, 44, 20.5], # green (ring 1)  
        'Symbol3': [0, 3.9, 12.5, 28, 52, 85, 133, 200, 200] # red (ring 0)
    }
    
    total_coeff = 0
    
    # collection[0] = red ring (Symbol3)
    # collection[1] = green ring (Symbol2) 
    # collection[2] = blue ring (Symbol1)
    
    if collection[0] > 0 and collection[0] < len(coeffs['Symbol3']):
        total_coeff += coeffs['Symbol3'][collection[0]]
    if collection[1] > 0 and collection[1] < len(coeffs['Symbol2']):
        total_coeff += coeffs['Symbol2'][collection[1]]
    if collection[2] > 0 and collection[2] < len(coeffs['Symbol1']):
        total_coeff += coeffs['Symbol1'][collection[2]]
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ –∫–æ–ª—å—Ü–∞—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    return total_coeff if total_coeff > 0 else 1.01

def apply_symbol_with_bonus(prev_collection, symbol):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–º–≤–æ–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–æ–Ω—É—Å–æ–≤"""
    global BALANCE
    
    col = prev_collection.copy()
    bonus_amount = 0
    MAX_STEP = 5  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –Ω–∞ –∫–æ–ª—å—Ü–æ –¥–ª—è Symbol1 –∏ Symbol2
    MAX_STEP_SYMBOL3 = 8  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è Symbol3 (–∫—Ä–∞—Å–Ω–æ–µ –∫–æ–ª—å—Ü–æ)
    
    if symbol == 'Symbol1':  # BLUE -> –∏–Ω–¥–µ–∫—Å 2
        new_value = min(col[2] + 1, MAX_STEP)
        col[2] = new_value
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç = 7)
        if new_value == MAX_STEP:
            bonus_amount = 7  # +7 –±–æ–Ω—É—Å
            print(f'[APP] üéâ –ë–û–ù–£–°! Symbol1 –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–∞—á–∏—Å–ª—è–µ–º +7 –∫ –±–∞–ª–∞–Ω—Å—É')
            
    elif symbol == 'Symbol2':  # GREEN -> –∏–Ω–¥–µ–∫—Å 1
        new_value = min(col[1] + 1, MAX_STEP)
        col[1] = new_value
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç = 20.5)
        if new_value == MAX_STEP:
            bonus_amount = 20.5  # +20.5 –±–æ–Ω—É—Å
            print(f'[APP] üéâ –ë–û–ù–£–°! Symbol2 –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–∞—á–∏—Å–ª—è–µ–º +20.5 –∫ –±–∞–ª–∞–Ω—Å—É')
            
    elif symbol == 'Symbol3':  # RED -> –∏–Ω–¥–µ–∫—Å 0
        new_value = min(col[0] + 1, MAX_STEP_SYMBOL3)
        col[0] = new_value
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç = 200)
        if new_value == MAX_STEP_SYMBOL3:
            bonus_amount = 200  # +200 –±–æ–Ω—É—Å
            print(f'[APP] üéâ –ë–û–ù–£–°! Symbol3 –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–∞—á–∏—Å–ª—è–µ–º +200 –∫ –±–∞–ª–∞–Ω—Å—É')
        
    elif symbol == 'SymbolLoss':  # —á–µ—Ä–µ–ø -> –ø–æ–ª–Ω—ã–π —Ä–µ—Å—Ç–∞—Ä—Ç
        col = [0, 0, 0]
        
        # –ü—Ä–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ —á–µ—Ä–µ–ø–∞ –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∫ –±–∞–ª–∞–Ω—Å—É
        bonus_amount = 0.5  # +0.5 –∑–∞ –≤—ã–ø–∞–¥–µ–Ω–∏–µ —á–µ—Ä–µ–ø–∞
        print(f'[APP] üíÄ –ß–ï–†–ï–ü! –ù–∞—á–∏—Å–ª—è–µ–º —É—Ç–µ—à–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å {bonus_amount} –∫ –±–∞–ª–∞–Ω—Å—É')
        
    # –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–Ω—É—Å - –Ω–∞—á–∏—Å–ª—è–µ–º –µ–≥–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    if bonus_amount > 0:
        BALANCE += bonus_amount
        print(f'[APP] üí∞ –ù–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å {bonus_amount}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {BALANCE}')
    
    return col, bonus_amount

@app.route('/api/bets/place', methods=['POST'])
@app.route('/v2/api/bets/place', methods=['POST'])
def place_bet():
    """–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏"""
    global BALANCE
    
    try:
        data = request.get_json() or {}
        stake = float(data.get('stake', 1.0))
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É —Å –±–∞–ª–∞–Ω—Å–∞
        BALANCE -= stake
        print(f'[APP] –°–ø–∏—Å–∞–ª–∏ —Å—Ç–∞–≤–∫—É: {stake}, –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {BALANCE}')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∫–∞–∫ –≤ MSW)
        symbols = ['Symbol1', 'Symbol2', 'Symbol3']
        symbol = random.choice(symbols)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–ª–µ—Ü –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json() or {}
        current_collection = data.get('collection', [0, 0, 0])
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–æ–Ω—É—Å–æ–≤
        new_collection, bonus_amount = apply_symbol_with_bonus(current_collection, symbol)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        game_settings = get_game_settings_data()
        coefficients = game_settings[symbol]
        coefficient = random.choice(coefficients)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        payout = stake * coefficient
        
        # 30% —à–∞–Ω—Å –∞–≤—Ç–æ–∫–µ—à–∞—É—Ç–∞
        autocashout = random.random() < 0.3
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        return jsonify({
            "state": {
                "initial": False,
                "collection": new_collection,  # –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å –±–æ–Ω—É—Å–∞–º–∏
                "bonusWin": bonus_amount,  # —Å—É–º–º–∞ –±–æ–Ω—É—Å–∞
                "superBonus": False,
                "symbol": symbol,
                "cashable": True
            },
            "result": "won" if payout > 0 else "lost",
            "payout": payout,
            "coefficient": coefficient,
            "autocashout": autocashout,
            "roundId": f"round-{roundCounter}"
        })
        
    except Exception as e:
        print(f'[APP] –û—à–∏–±–∫–∞ –≤ place_bet: {e}')
        return jsonify({"error": str(e)}), 500

@app.route('/api/bets/cashout', methods=['POST'])
@app.route('/v2/api/bets/cashout', methods=['POST'])
def cashout():
    """–ö–µ—à–∞—É—Ç (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ MSW)"""
    global BALANCE, roundCounter
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        data = request.get_json() or {}
        current_collection = data.get('collection', [0, 0, 0])
        
        # 1) –°—á–∏—Ç–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ª–µ—Ü
        coefficient = calculate_coefficient_from_rings(current_collection)
        bet_amount = 1  # –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, –Ω–æ –ø–æ–∫–∞ —Ñ–∏–∫—Å–∏—Ä—É–µ–º
        payout = round(bet_amount * coefficient, 2)
        
        BALANCE += payout
        print(f'[APP] –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ: coefficient={coefficient}, payout={payout}, –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {BALANCE}')
        
        # 2) –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∞—É—Ç —É —Ç–µ–∫—É—â–µ–≥–æ –∏ –ì–û–¢–û–í–ò–ú –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
        roundCounter += 1
        
        # –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—Ç–≤–µ—Ç–µ —É–∂–µ ¬´–æ–±–Ω—É–ª—ë–Ω–Ω–æ–µ¬ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ,
        # —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç —Å–∞–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–ª —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
        reset_state = {
            "initial": True,
            "collection": [0, 0, 0],
            "bonusWin": 0,
            "superBonus": False,
            "symbol": "SymbolNeutral",
            "cashable": False
        }
        
        # 3) –û—Ç–¥–∞—ë–º –æ—Ç–≤–µ—Ç: –±–∞–ª–∞–Ω—Å —É–∂–µ –Ω–∞—á–∏—Å–ª–∏–ª–∏, –∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî —á–∏—Å—Ç–æ–µ
        return jsonify({
            "state": reset_state,
            "result": "won",
            "payout": payout,
            "coefficient": coefficient,
            "roundId": f"round-{roundCounter}"
        })
        
    except Exception as e:
        print(f'[APP] –û—à–∏–±–∫–∞ –≤ cashout: {e}')
        return jsonify({"error": str(e)}), 500

# === Profile update endpoints ===
@app.route('/api/player', methods=['PUT'])
@app.route('/api/common/player', methods=['PUT'])
@app.route('/v2/api/player', methods=['PUT'])
@app.route('/v2/api/common/player', methods=['PUT'])
def update_player():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ (–≤–∫–ª—é—á–∞—è –Ω–∏–∫–Ω–µ–π–º)"""
    try:
        data = request.get_json() or {}
        nickname = data.get('nickname', 'vortex')
        
        print(f'[APP] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: nickname={nickname}')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π –Ω–∏–∫–Ω–µ–π–º
        if not nickname:
            nickname = "vortex"  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        return jsonify({
            "success": True,
            "nickname": nickname,
            "message": "Profile updated successfully"
        })
        
    except Exception as e:
        print(f'[APP] –û—à–∏–±–∫–∞ –≤ update_player: {e}')
        return jsonify({"error": str(e)}), 500

@app.route('/api/common/profile/update', methods=['POST'])
@app.route('/v2/api/common/profile/update', methods=['POST'])
def update_profile():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        data = request.get_json() or {}
        nickname = data.get('nickname', 'vortex')
        
        print(f'[APP] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π): nickname={nickname}')
        
        return jsonify({
            "success": True,
            "nickname": nickname,
            "message": "Profile updated successfully"
        })
        
    except Exception as e:
        print(f'[APP] –û—à–∏–±–∫–∞ –≤ update_profile: {e}')
        return jsonify({"error": str(e)}), 500

# === MyBets endpoints ===
@app.route('/api/common/bets/my', methods=['GET'])
@app.route('/v2/api/common/bets/my', methods=['GET'])
def my_bets():
    """–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        game_id = request.args.get('gameId', 'vortex')
        limit = int(request.args.get('limit', 10))
        offset = int(request.args.get('offset', 0))
        
        print(f'[APP] –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫: gameId={game_id}, limit={limit}, offset={offset}')
        
        # –°—Ç–∞—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫ (–∫–∞–∫ –≤ MSW)
        static_bets_history = [
            {
                "id": "bet-001",
                "gameId": "vortex",
                "roundId": "round-001",
                "amount": 500,
                "payout": 1250,
                "coefficient": 2.5,
                "payoutCoefficient": 2.5,
                "result": "won",
                "updatedAt": "2025-01-15T23:08:00.000Z",
                "state": {"collection": [1, 1, 0], "bonusWin": 0, "superBonus": False, "symbol": "Symbol2"}
            },
            {
                "id": "bet-002",
                "gameId": "vortex",
                "roundId": "round-002",
                "amount": 200,
                "payout": 0,
                "coefficient": 0,
                "payoutCoefficient": 0,
                "result": "lose",
                "updatedAt": "2025-01-15T23:05:00.000Z",
                "state": {"collection": [0, 0, 0], "bonusWin": 0, "superBonus": False, "symbol": "SymbolLoss"}
            },
            {
                "id": "bet-003",
                "gameId": "vortex",
                "roundId": "round-003",
                "amount": 1000,
                "payout": 0,
                "coefficient": 0,
                "payoutCoefficient": 0,
                "result": "pending",
                "updatedAt": "2025-01-15T23:10:00.000Z",
                "state": {"collection": [1, 0, 0], "bonusWin": 0, "superBonus": False, "symbol": "Symbol3"}
            },
            {
                "id": "bet-004",
                "gameId": "vortex",
                "roundId": "round-004",
                "amount": 750,
                "payout": 1350,
                "coefficient": 1.8,
                "payoutCoefficient": 1.8,
                "result": "won",
                "updatedAt": "2025-01-15T23:00:00.000Z",
                "state": {"collection": [1, 1, 0], "bonusWin": 0, "superBonus": False, "symbol": "Symbol2"}
            },
            {
                "id": "bet-005",
                "gameId": "vortex",
                "roundId": "round-005",
                "amount": 300,
                "payout": 0,
                "coefficient": 0,
                "payoutCoefficient": 0,
                "result": "lose",
                "updatedAt": "2025-01-15T22:55:00.000Z",
                "state": {"collection": [0, 0, 0], "bonusWin": 0, "superBonus": False, "symbol": "SymbolLoss"}
            }
        ]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        paginated_bets = static_bets_history[offset:offset + limit]
        
        print(f'[APP] –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(paginated_bets)} —Å—Ç–∞–≤–æ–∫ –∏–∑ {len(static_bets_history)}')
        return jsonify(paginated_bets)
        
    except Exception as e:
        print(f'[APP] –û—à–∏–±–∫–∞ –≤ my_bets: {e}')
        return jsonify({"error": str(e)}), 500

# === UNDO ONE STEP (–∫–Ω–æ–ø–∫–∞ "-1") ===
@app.route('/api/bets/cashoutPart', methods=['POST'])
@app.route('/api/bets/cashout/part', methods=['POST'])
@app.route('/api/bets/undo', methods=['POST'])
@app.route('/api/game/undo', methods=['POST'])
@app.route('/v2/api/bets/cashoutPart', methods=['POST'])
@app.route('/v2/api/bets/cashout/part', methods=['POST'])
@app.route('/v2/api/bets/undo', methods=['POST'])
@app.route('/v2/api/game/undo', methods=['POST'])
def undo_step():
    """–û—Ç–∫–∞—Ç –Ω–∞ –æ–¥–∏–Ω —à–∞–≥ (–∫–Ω–æ–ø–∫–∞ "-1")"""
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–∫–∞—Ç–∞ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return jsonify({
            "state": {
                "initial": False,
                "collection": [0, 0, 0],  # –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ—Ä–æ–Ω—Ç–æ–º
                "bonusWin": 0,
                "superBonus": False,
                "symbol": "SymbolNeutral",
                "cashable": False
            },
            "undone": True,
            "roundId": f"round-{roundCounter}"
        })
        
    except Exception as e:
        print(f'[APP] –û—à–∏–±–∫–∞ –≤ undo_step: {e}')
        return jsonify({"error": str(e)}), 500

# === CORS –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ ===
@app.after_request
def after_request(response):
    response.headers.add('Access-Control-Allow-Origin', '*')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization,X-Requested-With')
    response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
    response.headers.add('Access-Control-Allow-Credentials', 'true')
    response.headers.add('Access-Control-Max-Age', '86400')
    return response

# === OPTIONS handler –¥–ª—è CORS ===
@app.before_request
def handle_preflight():
    if request.method == "OPTIONS":
        response = jsonify({})
        response.headers.add("Access-Control-Allow-Origin", "*")
        response.headers.add('Access-Control-Allow-Headers', "Content-Type,Authorization,X-Requested-With")
        response.headers.add('Access-Control-Allow-Methods', "GET,PUT,POST,DELETE,OPTIONS")
        response.headers.add('Access-Control-Allow-Credentials', 'true')
        return response

# === Vercel handler ===
def handler(request):
    """Handler –¥–ª—è Vercel"""
    return app(request.environ, lambda *args: None)

if __name__ == '__main__':
    print('[APP] –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...')
    print(f'[APP] –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {BALANCE}')
    port = int(os.environ.get('PORT', 5000))
    app.run(debug=True, host='0.0.0.0', port=port)