// –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
console.log('[QUICK-FIX-NICKNAME] –ó–∞–≥—Ä—É–∂–∞–µ–º –±—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ');

function quickFixNickname() {
  console.log('[QUICK-FIX-NICKNAME] üöÄ –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞...');
  
  const nickname = 'vortex';
  let fixedCount = 0;
  
  // 1. –ò—â–µ–º –ø–æ —Ç–æ—á–Ω—ã–º –∫–ª–∞—Å—Å–∞–º –∏–∑ HTML
  const exactSelectors = [
    '.settingNameInput--fEvyT',
    'input[class*="settingNameInput"]',
    'input[class*="settingName"]',
    'input[class*="NameInput"]'
  ];
  
  exactSelectors.forEach(selector => {
    const elements = document.querySelectorAll(selector);
    elements.forEach(element => {
      if (element.tagName === 'INPUT') {
        element.value = nickname;
        element.readOnly = false;
        element.disabled = false;
        element.style.borderColor = '';
        element.style.backgroundColor = '';
        element.classList.remove('error', 'invalid', 'has-error');
        
        // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è
        element.dispatchEvent(new Event('input', { bubbles: true }));
        element.dispatchEvent(new Event('change', { bubbles: true }));
        element.dispatchEvent(new Event('blur', { bubbles: true }));
        
        fixedCount++;
        console.log('[QUICK-FIX-NICKNAME] ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ:', element);
      }
    });
  });
  
  // 2. –ò—â–µ–º –ø–æ label
  const labels = document.querySelectorAll('label[class*="settingNameLabel"], label[class*="NameLabel"]');
  labels.forEach(label => {
    const forId = label.getAttribute('for');
    if (forId) {
      const input = document.getElementById(forId);
      if (input && input.tagName === 'INPUT') {
        input.value = nickname;
        input.readOnly = false;
        input.disabled = false;
        input.style.borderColor = '';
        input.style.backgroundColor = '';
        input.classList.remove('error', 'invalid', 'has-error');
        
        input.dispatchEvent(new Event('input', { bubbles: true }));
        input.dispatchEvent(new Event('change', { bubbles: true }));
        input.dispatchEvent(new Event('blur', { bubbles: true }));
        
        fixedCount++;
        console.log('[QUICK-FIX-NICKNAME] ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –ø–æ label:', input);
      }
    }
  });
  
  // 3. –ò—â–µ–º –≤—Å–µ input –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
  const settingsContainers = document.querySelectorAll('[class*="settings"], [class*="setting"], [class*="modal"]');
  settingsContainers.forEach(container => {
    const inputs = container.querySelectorAll('input[type="text"], input:not([type])');
    inputs.forEach(input => {
      if (!input.classList.contains('amount__input') && 
          !input.classList.contains('bet__input') &&
          !input.id.includes('amount') &&
          !input.id.includes('bet')) {
        
        input.value = nickname;
        input.readOnly = false;
        input.disabled = false;
        input.style.borderColor = '';
        input.style.backgroundColor = '';
        input.classList.remove('error', 'invalid', 'has-error');
        
        input.dispatchEvent(new Event('input', { bubbles: true }));
        input.dispatchEvent(new Event('change', { bubbles: true }));
        input.dispatchEvent(new Event('blur', { bubbles: true }));
        
        fixedCount++;
        console.log('[QUICK-FIX-NICKNAME] ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:', input);
      }
    });
  });
  
  console.log(`[QUICK-FIX-NICKNAME] ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} –ø–æ–ª–µ–π`);
  return fixedCount;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
window.quickFixNickname = quickFixNickname;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
setTimeout(() => {
  console.log('[QUICK-FIX-NICKNAME] üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...');
  quickFixNickname();
}, 1000);

console.log('[QUICK-FIX-NICKNAME] –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ quickFixNickname()');

