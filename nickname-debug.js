// –ü—Ä–æ—Å—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –Ω–∏–∫–Ω–µ–π–º–æ–º
console.log('[NICKNAME-DEBUG] –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –Ω–∏–∫–Ω–µ–π–º–∞');

function debugNickname() {
  console.log('[NICKNAME-DEBUG] üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
  console.log('[NICKNAME-DEBUG] üì¶ localStorage:');
  const storageKeys = ['nickname', 'playerName', 'name', 'player_name', 'user_name', 'token'];
  storageKeys.forEach(key => {
    const value = localStorage.getItem(key);
    if (value) {
      console.log(`  ‚úÖ ${key}:`, value);
    } else {
      console.log(`  ‚ùå ${key}: –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º sessionStorage
  console.log('[NICKNAME-DEBUG] üì¶ sessionStorage:');
  storageKeys.forEach(key => {
    const value = sessionStorage.getItem(key);
    if (value) {
      console.log(`  ‚úÖ ${key}:`, value);
    } else {
      console.log(`  ‚ùå ${key}: –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω
  console.log('[NICKNAME-DEBUG] üîë JWT —Ç–æ–∫–µ–Ω:');
  const token = localStorage.getItem('token');
  if (token) {
    try {
      const parts = token.split('.');
      if (parts.length === 3) {
        const payload = JSON.parse(atob(parts[1]));
        console.log('  Payload:', payload);
        
        const nicknameFields = ['nickname', 'name', 'playerName', 'player_name'];
        nicknameFields.forEach(field => {
          if (payload[field]) {
            console.log(`  ‚úÖ JWT.${field}:`, payload[field]);
          } else {
            console.log(`  ‚ùå JWT.${field}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
          }
        });
      }
    } catch (e) {
      console.log('  ‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT:', e);
    }
  } else {
    console.log('  ‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
  console.log('[NICKNAME-DEBUG] üé® UI —ç–ª–µ–º–µ–Ω—Ç—ã:');
  const uiSelectors = [
    'input[placeholder*="Nickname"]',
    'input[placeholder*="nickname"]', 
    'input[name*="nickname"]',
    'input[id*="nickname"]',
    'input[class*="nickname"]'
  ];
  
  let foundElements = 0;
  uiSelectors.forEach(selector => {
    const elements = document.querySelectorAll(selector);
    elements.forEach(element => {
      foundElements++;
      console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç:`, {
        selector: selector,
        value: element.value,
        placeholder: element.placeholder,
        className: element.className,
        id: element.id
      });
    });
  });
  
  if (foundElements === 0) {
    console.log('  ‚ùå –ü–æ–ª—è –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
  console.log('[NICKNAME-DEBUG] üåê –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:');
  let foundObjects = 0;
  const globalKeys = Object.keys(window);
  for (const key of globalKeys) {
    try {
      const obj = window[key];
      if (obj && typeof obj === 'object') {
        if (obj.profile && (obj.profile.name || obj.profile.nickname)) {
          foundObjects++;
          console.log(`  ‚úÖ ${key}.profile:`, {
            name: obj.profile.name,
            nickname: obj.profile.nickname
          });
        }
        if (obj.nickname) {
          foundObjects++;
          console.log(`  ‚úÖ ${key}.nickname:`, obj.nickname);
        }
        if (obj.name && typeof obj.name === 'string') {
          foundObjects++;
          console.log(`  ‚úÖ ${key}.name:`, obj.name);
        }
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    }
  }
  
  if (foundObjects === 0) {
    console.log('  ‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  console.log('[NICKNAME-DEBUG] ‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
window.debugNickname = debugNickname;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
setTimeout(() => {
  console.log('[NICKNAME-DEBUG] üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...');
  debugNickname();
}, 2000);

console.log('[NICKNAME-DEBUG] –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ debugNickname() –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.');

