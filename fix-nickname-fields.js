// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –Ω–∏–∫–Ω–µ–π–º–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
console.log('[FIX-NICKNAME-FIELDS] –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –Ω–∏–∫–Ω–µ–π–º–∞');

function findAndFixNicknameFields() {
  console.log('[FIX-NICKNAME-FIELDS] üîç –ò—â–µ–º –ø–æ–ª—è –Ω–∏–∫–Ω–µ–π–º–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏...');
  
  const nickname = 'vortex';
  let foundFields = 0;
  
  // 1. –ò—â–µ–º –ø–æ –∫–ª–∞—Å—Å–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –Ω–∞—à–ª–∏ –≤ HTML
  const specificSelectors = [
    '.settingNameInput--fEvyT',           // –¢–æ—á–Ω—ã–π –∫–ª–∞—Å—Å –∏–∑ HTML
    'input[class*="settingNameInput"]',   // –ü–æ —á–∞—Å—Ç–∏ –∫–ª–∞—Å—Å–∞
    'input[class*="settingName"]',        // –ü–æ —á–∞—Å—Ç–∏ –∫–ª–∞—Å—Å–∞
    'input[class*="NameInput"]',          // –ü–æ —á–∞—Å—Ç–∏ –∫–ª–∞—Å—Å–∞
    'input[class*="Name"]',               // –ü–æ —á–∞—Å—Ç–∏ –∫–ª–∞—Å—Å–∞
    'input[id*="1dcdbcb2"]',              // –ü–æ ID –∏–∑ HTML
    'input[id*="b0b3"]',                  // –ü–æ —á–∞—Å—Ç–∏ ID
  ];
  
  // 2. –ò—â–µ–º –ø–æ label —Ä—è–¥–æ–º —Å input
  const labels = document.querySelectorAll('label[class*="settingNameLabel"], label[class*="NameLabel"]');
  labels.forEach(label => {
    const forId = label.getAttribute('for');
    if (forId) {
      const input = document.getElementById(forId);
      if (input && input.tagName === 'INPUT') {
        console.log('[FIX-NICKNAME-FIELDS] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–æ label:', input);
        fillNicknameField(input, nickname);
        foundFields++;
      }
    }
  });
  
  // 3. –ò—â–µ–º –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
  specificSelectors.forEach(selector => {
    const elements = document.querySelectorAll(selector);
    elements.forEach(element => {
      if (element.tagName === 'INPUT') {
        console.log('[FIX-NICKNAME-FIELDS] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É:', selector, element);
        fillNicknameField(element, nickname);
        foundFields++;
      }
    });
  });
  
  // 4. –ò—â–µ–º –≤—Å–µ input –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
  const settingsContainers = document.querySelectorAll('[class*="settings"], [class*="setting"], [class*="modal"], [class*="popup"]');
  settingsContainers.forEach(container => {
    const inputs = container.querySelectorAll('input[type="text"], input:not([type])');
    inputs.forEach(input => {
      // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—è –¥–ª—è —Å—Ç–∞–≤–æ–∫
      if (!input.classList.contains('amount__input') && 
          !input.classList.contains('bet__input') &&
          !input.id.includes('amount') &&
          !input.id.includes('bet') &&
          !input.id.includes('email') &&
          !input.id.includes('password')) {
        
        console.log('[FIX-NICKNAME-FIELDS] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:', input);
        fillNicknameField(input, nickname);
        foundFields++;
      }
    });
  });
  
  // 5. –ò—â–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (—Ç–µ–∫—Å—Ç —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º)
  const allInputs = document.querySelectorAll('input[type="text"], input:not([type])');
  allInputs.forEach(input => {
    const parent = input.parentElement;
    const parentText = parent ? parent.textContent.toLowerCase() : '';
    const grandParent = parent ? parent.parentElement : null;
    const grandParentText = grandParent ? grandParent.textContent.toLowerCase() : '';
    
    if (parentText.includes('nickname') || 
        parentText.includes('name') || 
        parentText.includes('username') ||
        parentText.includes('player') ||
        grandParentText.includes('nickname') ||
        grandParentText.includes('name')) {
      
      if (!input.classList.contains('amount__input') && 
          !input.classList.contains('bet__input') &&
          !input.id.includes('amount') &&
          !input.id.includes('bet')) {
        
        console.log('[FIX-NICKNAME-FIELDS] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É:', input);
        fillNicknameField(input, nickname);
        foundFields++;
      }
    }
  });
  
  console.log(`[FIX-NICKNAME-FIELDS] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ ${foundFields} –ø–æ–ª–µ–π`);
  return foundFields;
}

function fillNicknameField(input, nickname) {
  console.log('[FIX-NICKNAME-FIELDS] üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ:', input);
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ
  input.value = nickname;
  
  // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
  input.readOnly = false;
  input.disabled = false;
  
  // –£–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª–∏ –æ—à–∏–±–æ–∫
  input.style.borderColor = '';
  input.style.backgroundColor = '';
  input.classList.remove('error', 'invalid', 'has-error');
  
  // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è
  input.dispatchEvent(new Event('input', { bubbles: true }));
  input.dispatchEvent(new Event('change', { bubbles: true }));
  input.dispatchEvent(new Event('blur', { bubbles: true }));
  
  // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
  input.focus();
  input.blur();
  
  console.log('[FIX-NICKNAME-FIELDS] ‚úÖ –ü–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ:', input.value);
}

function openSettingsAndFix() {
  console.log('[FIX-NICKNAME-FIELDS] üîß –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...');
  
  // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const settingsButtons = document.querySelectorAll(
    '[data-track="settings"], [class*="settings"], [class*="setting"], button[aria-label*="settings"], button[title*="settings"]'
  );
  
  let settingsOpened = false;
  settingsButtons.forEach(button => {
    if (button && !settingsOpened) {
      console.log('[FIX-NICKNAME-FIELDS] üéØ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∫–ª–∏–∫–∞–µ–º...');
      button.click();
      settingsOpened = true;
      
      // –ñ–¥–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
      setTimeout(() => {
        console.log('[FIX-NICKNAME-FIELDS] ‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—è...');
        findAndFixNicknameFields();
      }, 500);
    }
  });
  
  if (!settingsOpened) {
    console.log('[FIX-NICKNAME-FIELDS] ‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  return settingsOpened;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
window.findAndFixNicknameFields = findAndFixNicknameFields;
window.fillNicknameField = fillNicknameField;
window.openSettingsAndFix = openSettingsAndFix;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—è
setTimeout(() => {
  console.log('[FIX-NICKNAME-FIELDS] üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—è...');
  findAndFixNicknameFields();
}, 1000);

// –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
setTimeout(() => {
  console.log('[FIX-NICKNAME-FIELDS] üöÄ –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
  openSettingsAndFix();
}, 2000);

// –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
setTimeout(() => findAndFixNicknameFields(), 3000);
setTimeout(() => findAndFixNicknameFields(), 5000);
setTimeout(() => findAndFixNicknameFields(), 10000);

// –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ DOM
const observer = new MutationObserver(function(mutations) {
  mutations.forEach(function(mutation) {
    if (mutation.type === 'childList') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ –ø–æ–ª—è
      const newInputs = document.querySelectorAll('.settingNameInput--fEvyT, input[class*="settingNameInput"]');
      if (newInputs.length > 0) {
        console.log('[FIX-NICKNAME-FIELDS] üÜï –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –ø–æ–ª—è, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...');
        findAndFixNicknameFields();
      }
    }
  });
});

observer.observe(document.body, {
  childList: true,
  subtree: true
});

console.log('[FIX-NICKNAME-FIELDS] –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ findAndFixNicknameFields() –∏–ª–∏ openSettingsAndFix()');

